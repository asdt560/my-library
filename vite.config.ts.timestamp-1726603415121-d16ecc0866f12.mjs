// vite.config.ts
import { defineConfig } from "file:///C:/Users/Justo/Documents/GitHub/my-library/node_modules/vite/dist/node/index.js";
import dts from "file:///C:/Users/Justo/Documents/GitHub/my-library/node_modules/vite-plugin-dts/dist/index.mjs";

// package.json
var peerDependencies = {
  react: "^18.3.1",
};

// vite.config.ts
var vite_config_default = defineConfig({
  build: {
    lib: {
      entry: "./src/index.ts",
      // Specifies the entry point for building the library.
      name: "vite-react-ts-button",
      // Sets the name of the generated library.
      fileName: (format) => `index.${format}.js`,
      // Generates the output file name based on the format.
      formats: ["cjs", "es"],
      // Specifies the output formats (CommonJS and ES modules).
    },
    rollupOptions: {
      external: [...Object.keys(peerDependencies)],
      // Defines external dependencies for Rollup bundling.
    },
    sourcemap: true,
    // Generates source maps for debugging.
    emptyOutDir: true,
    // Clears the output directory before building.
  },
  test: {
    globals: true,
    environment: "jsdom",
    setupFiles: "./setupTests.ts",
  },
  plugins: [dts()],
  // Uses the 'vite-plugin-dts' plugin for generating TypeScript declaration files (d.ts).
});
export { vite_config_default as default };
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiLCAicGFja2FnZS5qc29uIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiQzpcXFxcVXNlcnNcXFxcSnVzdG9cXFxcRG9jdW1lbnRzXFxcXEdpdEh1YlxcXFxteS1saWJyYXJ5XCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCJDOlxcXFxVc2Vyc1xcXFxKdXN0b1xcXFxEb2N1bWVudHNcXFxcR2l0SHViXFxcXG15LWxpYnJhcnlcXFxcdml0ZS5jb25maWcudHNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsID0gXCJmaWxlOi8vL0M6L1VzZXJzL0p1c3RvL0RvY3VtZW50cy9HaXRIdWIvbXktbGlicmFyeS92aXRlLmNvbmZpZy50c1wiOy8vLyA8cmVmZXJlbmNlIHR5cGVzPVwidml0ZXN0XCIgLz5cblxuaW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSBcInZpdGVcIjtcbmltcG9ydCBkdHMgZnJvbSBcInZpdGUtcGx1Z2luLWR0c1wiO1xuaW1wb3J0IHsgcGVlckRlcGVuZGVuY2llcyB9IGZyb20gXCIuL3BhY2thZ2UuanNvblwiO1xuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoe1xuICBidWlsZDoge1xuICAgIGxpYjoge1xuICAgICAgZW50cnk6IFwiLi9zcmMvaW5kZXgudHNcIiwgLy8gU3BlY2lmaWVzIHRoZSBlbnRyeSBwb2ludCBmb3IgYnVpbGRpbmcgdGhlIGxpYnJhcnkuXG4gICAgICBuYW1lOiBcInZpdGUtcmVhY3QtdHMtYnV0dG9uXCIsIC8vIFNldHMgdGhlIG5hbWUgb2YgdGhlIGdlbmVyYXRlZCBsaWJyYXJ5LlxuICAgICAgZmlsZU5hbWU6IChmb3JtYXQpID0+IGBpbmRleC4ke2Zvcm1hdH0uanNgLCAvLyBHZW5lcmF0ZXMgdGhlIG91dHB1dCBmaWxlIG5hbWUgYmFzZWQgb24gdGhlIGZvcm1hdC5cbiAgICAgIGZvcm1hdHM6IFtcImNqc1wiLCBcImVzXCJdLCAvLyBTcGVjaWZpZXMgdGhlIG91dHB1dCBmb3JtYXRzIChDb21tb25KUyBhbmQgRVMgbW9kdWxlcykuXG4gICAgfSxcbiAgICByb2xsdXBPcHRpb25zOiB7XG4gICAgICBleHRlcm5hbDogWy4uLk9iamVjdC5rZXlzKHBlZXJEZXBlbmRlbmNpZXMpXSwgLy8gRGVmaW5lcyBleHRlcm5hbCBkZXBlbmRlbmNpZXMgZm9yIFJvbGx1cCBidW5kbGluZy5cbiAgICB9LFxuICAgIHNvdXJjZW1hcDogdHJ1ZSwgLy8gR2VuZXJhdGVzIHNvdXJjZSBtYXBzIGZvciBkZWJ1Z2dpbmcuXG4gICAgZW1wdHlPdXREaXI6IHRydWUsIC8vIENsZWFycyB0aGUgb3V0cHV0IGRpcmVjdG9yeSBiZWZvcmUgYnVpbGRpbmcuXG4gIH0sXG4gIHRlc3Q6IHtcbiAgICBnbG9iYWxzOiB0cnVlLFxuICAgIGVudmlyb25tZW50OiBcImpzZG9tXCIsXG4gICAgc2V0dXBGaWxlczogXCIuL3NldHVwVGVzdHMudHNcIixcbiAgfSxcbiAgcGx1Z2luczogW2R0cygpXSwgLy8gVXNlcyB0aGUgJ3ZpdGUtcGx1Z2luLWR0cycgcGx1Z2luIGZvciBnZW5lcmF0aW5nIFR5cGVTY3JpcHQgZGVjbGFyYXRpb24gZmlsZXMgKGQudHMpLlxufSk7XG4iLCAie1xuICBcIm5hbWVcIjogXCJteS1saWJyYXJ5XCIsXG4gIFwidmVyc2lvblwiOiBcIjEuMC4wXCIsXG4gIFwidHlwZVwiOiBcIm1vZHVsZVwiLFxuICBcIm1haW5cIjogXCJkaXN0L2luZGV4LmNqcy5qc1wiLFxuICBcIm1vZHVsZVwiOiBcImRpc3QvaW5kZXguZXMuanNcIixcbiAgXCJ0eXBlc1wiOiBcImRpc3QvaW5kZXguZC50c1wiLFxuICBcImZpbGVzXCI6IFtcbiAgICBcIi9kaXN0XCJcbiAgXSxcbiAgXCJzY3JpcHRzXCI6IHtcbiAgICBcImZvcm1hdFwiOiBcInByZXR0aWVyIC0td3JpdGUgLS1wYXJzZXIgdHlwZXNjcmlwdCAnKiovKi57dHMsdHN4fSdcIixcbiAgICBcImxpbnRcIjogXCJlc2xpbnQgLiAtLWV4dCAudHMsLnRzeCAtLWlnbm9yZS1wYXRoIC5naXRpZ25vcmUgLS1maXhcIixcbiAgICBcImJ1aWxkXCI6IFwidHNjICYmIHZpdGUgYnVpbGRcIixcbiAgICBcInRlc3RcIjogXCJ2aXRlc3QgcnVuXCIsXG4gICAgXCJ0ZXN0LXdhdGNoXCI6IFwidml0ZXN0XCIsXG4gICAgXCJ0ZXN0OnVpXCI6IFwidml0ZXN0IC0tdWlcIixcbiAgICBcInN0b3J5Ym9va1wiOiBcInN0b3J5Ym9vayBkZXYgLXAgNjAwNlwiLFxuICAgIFwiYnVpbGQtc3Rvcnlib29rXCI6IFwic3Rvcnlib29rIGJ1aWxkXCJcbiAgfSxcbiAgXCJrZXl3b3Jkc1wiOiBbXSxcbiAgXCJhdXRob3JcIjogXCJcIixcbiAgXCJsaWNlbnNlXCI6IFwiSVNDXCIsXG4gIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgXCJkZXZEZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiQGNocm9tYXRpYy1jb20vc3Rvcnlib29rXCI6IFwiXjEuOS4wXCIsXG4gICAgXCJAc3Rvcnlib29rL2FkZG9uLWVzc2VudGlhbHNcIjogXCJeOC4zLjFcIixcbiAgICBcIkBzdG9yeWJvb2svYWRkb24taW50ZXJhY3Rpb25zXCI6IFwiXjguMy4xXCIsXG4gICAgXCJAc3Rvcnlib29rL2FkZG9uLWxpbmtzXCI6IFwiXjguMy4xXCIsXG4gICAgXCJAc3Rvcnlib29rL2FkZG9uLW9uYm9hcmRpbmdcIjogXCJeOC4zLjFcIixcbiAgICBcIkBzdG9yeWJvb2svYmxvY2tzXCI6IFwiXjguMy4xXCIsXG4gICAgXCJAc3Rvcnlib29rL3JlYWN0XCI6IFwiXjguMy4xXCIsXG4gICAgXCJAc3Rvcnlib29rL3JlYWN0LXZpdGVcIjogXCJeOC4zLjFcIixcbiAgICBcIkBzdG9yeWJvb2svdGVzdFwiOiBcIl44LjMuMVwiLFxuICAgIFwiQHRlc3RpbmctbGlicmFyeS9qZXN0LWRvbVwiOiBcIl42LjUuMFwiLFxuICAgIFwiQHRlc3RpbmctbGlicmFyeS9yZWFjdFwiOiBcIl4xNi4wLjFcIixcbiAgICBcIkB0eXBlcy9yZWFjdFwiOiBcIl4xOC4zLjdcIixcbiAgICBcIkB0eXBlc2NyaXB0LWVzbGludC9lc2xpbnQtcGx1Z2luXCI6IFwiXjguNi4wXCIsXG4gICAgXCJAdHlwZXNjcmlwdC1lc2xpbnQvcGFyc2VyXCI6IFwiXjguNi4wXCIsXG4gICAgXCJlc2xpbnRcIjogXCJeOC41Ny4xXCIsXG4gICAgXCJlc2xpbnQtY29uZmlnLXByZXR0aWVyXCI6IFwiXjkuMS4wXCIsXG4gICAgXCJlc2xpbnQtcGx1Z2luLXByZXR0aWVyXCI6IFwiXjUuMi4xXCIsXG4gICAgXCJlc2xpbnQtcGx1Z2luLXJlYWN0XCI6IFwiXjcuMzYuMVwiLFxuICAgIFwiZXNsaW50LXBsdWdpbi1yZWFjdC1ob29rc1wiOiBcIl40LjYuMlwiLFxuICAgIFwiZXNsaW50LXBsdWdpbi1zdG9yeWJvb2tcIjogXCJeMC44LjBcIixcbiAgICBcImpzZG9tXCI6IFwiXjI1LjAuMFwiLFxuICAgIFwicHJldHRpZXJcIjogXCJeMy4zLjNcIixcbiAgICBcInN0b3J5Ym9va1wiOiBcIl44LjMuMVwiLFxuICAgIFwic3R5bGVkLWNvbXBvbmVudHNcIjogXCJeNi4xLjEzXCIsXG4gICAgXCJ0eXBlc2NyaXB0XCI6IFwiXjUuNi4yXCIsXG4gICAgXCJ2aXRlXCI6IFwiXjUuNC42XCIsXG4gICAgXCJ2aXRlLXBsdWdpbi1kdHNcIjogXCJeNC4yLjFcIixcbiAgICBcInZpdGVzdFwiOiBcIl4yLjEuMVwiXG4gIH0sXG4gIFwicGVlckRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJyZWFjdFwiOiBcIl4xOC4zLjFcIlxuICB9LFxuICBcInBhY2thZ2VNYW5hZ2VyXCI6IFwicG5wbUA5LjkuMCtzaGE1MTIuNjBjMThhY2QxMzhiZmY2OTVkMzM5YmU2YWQxM2Y3ZTkzNmVlYTY3NDU2NjBkNGNjNGE3NzZkNTI0N2M1NDBkMGVkZWUxYTU2MzY5NWMxODNhNjZlYjkxN2VmODhmMmI0ZmViMWZjMjVmMzJhN2FkY2FkYzdhYWYzNDM4ZTk5YzFcIlxufVxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUVBLFNBQVMsb0JBQW9CO0FBQzdCLE9BQU8sU0FBUzs7O0FDbURkLHVCQUFvQjtBQUFBLEVBQ2xCLE9BQVM7QUFDWDs7O0FEbERGLElBQU8sc0JBQVEsYUFBYTtBQUFBLEVBQzFCLE9BQU87QUFBQSxJQUNMLEtBQUs7QUFBQSxNQUNILE9BQU87QUFBQTtBQUFBLE1BQ1AsTUFBTTtBQUFBO0FBQUEsTUFDTixVQUFVLENBQUMsV0FBVyxTQUFTLE1BQU07QUFBQTtBQUFBLE1BQ3JDLFNBQVMsQ0FBQyxPQUFPLElBQUk7QUFBQTtBQUFBLElBQ3ZCO0FBQUEsSUFDQSxlQUFlO0FBQUEsTUFDYixVQUFVLENBQUMsR0FBRyxPQUFPLEtBQUssZ0JBQWdCLENBQUM7QUFBQTtBQUFBLElBQzdDO0FBQUEsSUFDQSxXQUFXO0FBQUE7QUFBQSxJQUNYLGFBQWE7QUFBQTtBQUFBLEVBQ2Y7QUFBQSxFQUNBLE1BQU07QUFBQSxJQUNKLFNBQVM7QUFBQSxJQUNULGFBQWE7QUFBQSxJQUNiLFlBQVk7QUFBQSxFQUNkO0FBQUEsRUFDQSxTQUFTLENBQUMsSUFBSSxDQUFDO0FBQUE7QUFDakIsQ0FBQzsiLAogICJuYW1lcyI6IFtdCn0K
